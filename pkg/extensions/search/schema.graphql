scalar Time

type CVEResultForImage {
    Tag: String
    CVEList: [CVE]
}

type CVE {
    Id: String
    Title: String
    Description: String
    Severity: String
    PackageList: [PackageInfo]
}

type PackageInfo {
    Name: String
    InstalledVersion: String
    FixedVersion: String
}

type RepoInfo {
    Images: [ImageSummary]
    Summary: RepoSummary
}

# Search results in all repos/images/layers
# There will be other more structures for more detailed information
type GlobalSearchResult {
    Images: [ImageSummary]
    Repos: [RepoSummary]
    Layers: [LayerSummary]
}

# Brief on a specific image to be used in queries returning a list of images
# We define an image as a pairing or a repo and a tag belonging to that repo
type ImageSummary {
    RepoName: String
    Tag: String
    Digest: String
    ConfigDigest: String
    LastUpdated: Time
    IsSigned: Boolean
    Size: String
    Platform: OsArch
    Vendor: String
    Score: Int
    DownloadCount: Int
    Layers: [LayerSummary]
    Description: String
    Licenses: String
    Labels: String
}

# Brief on a specific repo to be used in queries returning a list of repos
type RepoSummary {
    Name: String
    LastUpdated: Time
    Size: String
    Platforms: [OsArch]
    Vendors: [String]
    Score: Int
    NewestImage: ImageSummary
    DownloadCount: Int
    StarCount: Int
    IsBookmarked: Boolean
}

# Currently the same as LayerInfo, we can refactor later
# For detailed information on the layer a ImageListForDigest call can be made
type LayerSummary {
    Size: String  # Int64 is not supported.
    Digest: String
    Score: Int
}

type OsArch {
    Os: String
    Arch: String
}


enum SortCriteria {
     RELEVANCE
     UPDATE_TIME
     ALPHABETIC_ASC
     ALPHABETIC_DSC
     STARS
     DOWNLOADS
}

# Information on current page returned by the API
# ObjectCount represents the total number of objects on all pages
# PreviousPage represents previous page number
# NextPage represents next page number
# Pages represents total number of pages
type PageInfo {
     ObjectCount: Int!
     PreviousPage: Int
     NextPage: Int
     Pages: Int
}

interface Paginated {
     Page: PageInfo
}

# Paginated list of RepoSummary objects
# If limit is -1, pagination is disabled
type PaginatedReposResult implements Paginated {
     Page: PageInfo
     Results: [RepoSummary!]!
}

# Paginated list of ImageSummary objects
# If limit is -1, pagination is disabled
type PaginatedImagesResult implements Paginated {
     Page: PageInfo
     Results: [ImageSummary!]!
}

type Query {
    CVEListForImage(image: String!): CVEResultForImage!
    ImageListForCVE(id: String!): [ImageSummary!]
    ImageListWithCVEFixed(id: String!, image: String!): [ImageSummary!]
    ImageListForDigest(id: String!): [ImageSummary!]
    RepoListWithNewestImage: [RepoSummary!]!  # Newest based on created timestamp
    ImageList(repo: String!): [ImageSummary!]
    ExpandedRepoInfo(repo: String!): RepoInfo!
    GlobalSearch(query: String!): GlobalSearchResult!
    DerivedImageList(image: String!): [ImageSummary!]

    StarredRepos(limit: Int, offset: Int!, sortBy: SortCriteria): PaginatedReposResult!  # Newest based on created timestamp
    BookmarkedRepos(limit: Int, offset: Int!, sortBy: SortCriteria): PaginatedReposResult!  # Assuming the user is obtained from context object
}

type MutationResult {
     success: Boolean!
}

type Mutation {
     ToggleBookmark(repo: String!): MutationResult!  # Assuming the user is obtained from context object
     ToggleStar(repo: String!): MutationResult!  # Assuming the user is obtained from context object
}
